@model _5051.Models.SchoolYearReportViewModel
@{
    ViewBag.Title = "" + @Model.Student.Name + "'s School Year Report";
}
<script>
    function printContent(el) {
        var restorepage = document.body.innerHTML;
        var printcontent = document.getElementById(el).innerHTML;
        document.body.innerHTML = printcontent;
        window.print();
        document.body.innerHTML = restorepage;
    }
</script>

<br />
<ul class="nav nav-pills">
    <li class="nav-item ml-3">
        @Html.ActionLink("Weekly", "WeeklyReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    <li class="nav-item">
        @Html.ActionLink("Monthly", "MonthlyReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    <li class="nav-item">
        @Html.ActionLink("Semester", "SemesterReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    <li class="nav-item">
        @Html.ActionLink("Quarter", "QuarterReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    <li class="nav-item mr-auto">
        @Html.ActionLink("School Year", "OverallReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link active text-white" })
    </li>
    <li class="nav-item ml-3 mr-3">
        <div href="#" class="nav-link text-white btn-primary" onclick="printContent('div1')">Print Report</div>
    </li>
</ul>
<br />
<div class="row justify-content-center m-auto" style="width: 1200px">
    <div id="div1" class="bg-white p-5 w-100">
        <div class="text-center">
            <div class="row">

                <div class="col">
                    <h4>@Model.Student.Name's School Year Report</h4>
                    <h6>@Model.DateStart.ToString("d") to @Model.DateEnd.ToString("d")</h6>
                </div>
            </div>



        </div>
        <br />
        @if (Model.Stats.NumOfSchoolDays == 0)
        {
            <h5 class="text-light">No Data of this school year</h5>
        }
        else
        {
            <div class="chartWithMarkerOverlay">
                <div class="card w-100" id="curve_chart"></div>
                <div class="overlay-text">
                    <strong>@Model.Student.Name</strong> attended <strong>@Convert.ToInt32(Model.Stats.AccumlatedTotalHours.TotalMinutes)</strong> minutes out of
                    <strong>@Convert.ToInt32(Model.Stats.AccumlatedTotalHoursExpected.TotalMinutes)</strong> minutes of school time this school year.
                    <br />
                    Percentage of attended school time is:
                    <h1>@Model.Stats.PercAttendedHours%.</h1>
                </div>
            </div>
            <br />
            <div class="card w-100">
                <table class="table">



                    <tbody>
                        <tr>
                            <td>Present</td>
                            <td>@Model.Stats.DaysPresent days / @Model.Stats.NumOfSchoolDays school days</td>
                            <td>@Model.Stats.PercPresent%</td>
                        </tr>
                        <tr>
                            <td>Absent Unexcused</td>
                            <td>@Model.Stats.DaysAbsentUnexcused days / @Model.Stats.NumOfSchoolDays school days</td>
                            <td>@Model.Stats.PercUnexcused%</td>
                        </tr>
                        <tr>
                            <td>Absent Excused</td>
                            <td>@Model.Stats.DaysAbsentExcused days / @Model.Stats.NumOfSchoolDays school days</td>
                            <td>@Model.Stats.PercExcused%</td>
                        </tr>
                        <tr>
                            <td>In Late</td>
                            <td>@Model.Stats.DaysLate days / @Model.Stats.DaysPresent present days</td>
                            <td>@Model.Stats.PercInLate%</td>
                        </tr>
                        <tr>
                            <td>Out Early</td>
                            <td>@Model.Stats.DaysOutEarly days / @Model.Stats.DaysPresent present days</td>
                            <td>@Model.Stats.PercOutEarly%</td>
                        </tr>
                    </tbody>
                </table>

            </div>

            <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
            <script type="text/javascript">
            google.charts.load("current", { packages: ["calendar"] });
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {
                var dataTable = new google.visualization.DataTable();
                dataTable.addColumn({ type: 'date'});
                dataTable.addColumn({ type: 'number'});
                var dates = [
                    @String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.Date.ToString("yyyy,MM,dd")).ToArray())
                ];
                var values = [
                    @String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.HoursAttended.TotalHours.ToString("0.##")).ToArray())
                ];

                var year;
                var month;
                var date;
                var i = 0;
                while (i < dates.length) {
                    year = dates[i];
                    i++;
                    month = dates[i] - 1;
                    i++;
                    date = dates[i];
                    i++;
                    dataTable.addRow([new Date(year, month, date), values[i / 3 - 1]]);
                }


                var chart = new google.visualization.Calendar(document.getElementById('calendar_basic'));

                var options = {
                    title: "Attendance In This School Year",
                    height: 350,
                    colorAxis: {
                        minValue: 0,
                        maxValue: 6.9
                    },


                };

                chart.draw(dataTable, options);
            }
            </script>
            <br />
            <div class="card w-100 p-3">
                <br />
                <div id="calendar_basic"></div>
            </div>
            <br />

            <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
            <script type="text/javascript">
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {
                // Create the data table.
                var data = new google.visualization.DataTable();
                data.addColumn('date', 'Date');
                data.addColumn('number', 'Perfect: 100%');
                data.addColumn('number', "Goal: @Model.Goal%");
                data.addColumn('number', '@Model.Student.Name: @Model.Stats.PercAttendedHours%');
                var dates = [
                    @String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.Date.ToString("yyyy,MM,dd")).ToArray())
                ];
                var values = [@String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.TotalHours.TotalMinutes.ToString("0.##")).ToArray())];
                var expected = [@String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.TotalHoursExpected.TotalMinutes.ToString("0.##")).ToArray())];

                var year;
                var month;
                var date;
                var i = 0;
                while (i < dates.length) {
                    year = dates[i];
                    i++;
                    month = dates[i] - 1;
                    i++;
                    date = dates[i];
                    i++;
                    data.addRow([new Date(year, month, date), expected[i / 3 - 1], expected[i / 3 - 1] * @Model.Goal /100, values[i / 3 - 1]]);
                }

                var options = {
                    height: 600,
                    curveType: 'function',
                    chartArea: { width: "85%", height: "70%" },
                    legend: 'top',
                    colors: ['#FF5733', '#FFC300', '#3498DB'],
                    vAxis: {
                        title: "Cumulative Attendance (Minutes)", gridlines: {
                            color: 'transparent'
                        }
                    },
                    hAxis: {
                        title: "Date", gridlines: {
                            count: 12,
                            color: 'transparent'
                        }
                    }
                };

                var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

                chart.draw(data, options);
            }
            </script>
        }
    </div>
</div>
<br />





