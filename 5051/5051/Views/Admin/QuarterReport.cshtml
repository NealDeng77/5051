@model _5051.Models.QuarterReportViewModel
@{
    ViewBag.Title = "Quarter Report";
}
<script>
    function printContent(el) {
        var restorepage = document.body.innerHTML;
        var printcontent = document.getElementById(el).innerHTML;
        document.body.innerHTML = printcontent;
        window.print();
        document.body.innerHTML = restorepage;
    }
</script>

<br />
<ul class="nav nav-pills">
    <li class="nav-item">
        @Html.ActionLink("Weekly", "WeeklyReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    <li class="nav-item">
        @Html.ActionLink("Monthly", "MonthlyReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    <li class="nav-item">
        @Html.ActionLink("Semester", "SemesterReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    <li class="nav-item">
        @Html.ActionLink("Quarter", "QuarterReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link active text-white" })
    </li>
    <li class="nav-item mr-auto">
        @Html.ActionLink("School Year", "OverallReport", "Admin", new { id = Model.StudentId }, new { @class = "nav-link text-white" })
    </li>
    @using (Html.BeginForm())
    {

        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.StudentId)
        <li class="nav-item">
            @Html.DropDownListFor(m => m.SelectedQuarterId, Model.Quarters, new { onchange = "this.form.submit();", @class = "form-control" })
        </li>
    }
    <li class="nav-item ml-5">
        <div href="#" class="nav-link text-white btn-primary" onclick="printContent('div1')">Print Report</div>
    </li>
</ul>
<br />
<div id="div1" class="bg-white" style="padding: 30px">
    <div class="text-center">
        <div class="row">

            <div class="col">
                <h4>@Model.Student.Name's Quarter Report</h4>
                <h6>@Model.DateStart.ToString("d") to @Model.DateEnd.ToString("d")</h6>
            </div>
        </div>



    </div>
    <br />
    @if (Model.Stats.NumOfSchoolDays == 0)
    {
        <h5 class="text-light">No Data of this semester</h5>
    }
    else
    {

        <div class="row">
            <div class="col-4">
                <div class="card h-100">
                    <div class="card-body">

                        <strong>@Model.Student.Name</strong> attended <strong>@Convert.ToInt32(Model.Stats.AccumlatedTotalHours.TotalMinutes)</strong> minutes out of
                        <strong>@Convert.ToInt32(Model.Stats.AccumlatedTotalHoursExpected.TotalMinutes)</strong> minutes of school time this quarter.
                        <br />
                        Percentage of attended school time is:


                        <h1>@Model.Stats.PercAttendedHours%.</h1>
                    </div>
                </div>
            </div>
            <div class="col-8">
                <div class="card">

                    <table class="table">



                        <tbody>
                            <tr>
                                <td>Present</td>
                                <td>@Model.Stats.DaysPresent days / @Model.Stats.NumOfSchoolDays school days</td>
                                <td>@Model.Stats.PercPresent%</td>
                            </tr>
                            <tr>
                                <td>Absent Unexcused</td>
                                <td>@Model.Stats.DaysAbsentUnexcused days / @Model.Stats.NumOfSchoolDays school days</td>
                                <td>@Model.Stats.PercUnexcused%</td>
                            </tr>
                            <tr>
                                <td>Absent Excused</td>
                                <td>@Model.Stats.DaysAbsentExcused days / @Model.Stats.NumOfSchoolDays school days</td>
                                <td>@Model.Stats.PercExcused%</td>
                            </tr>
                            <tr>
                                <td>In Late</td>
                                <td>@Model.Stats.DaysLate days / @Model.Stats.DaysPresent present days</td>
                                <td>@Model.Stats.PercInLate%</td>
                            </tr>
                            <tr>
                                <td>Out Early</td>
                                <td>@Model.Stats.DaysOutEarly days / @Model.Stats.DaysPresent present days</td>
                                <td>@Model.Stats.PercOutEarly%</td>
                            </tr>
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
        <br />

        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {
                // Create the data table.
                var data = new google.visualization.DataTable();
                data.addColumn('date', 'Date');
                data.addColumn('number', 'Actual');
                data.addColumn('number', 'Ideal');
                var dates = [
                    @String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.Date.ToString("yyyy,MM,dd")).ToArray())
                ];
                var values = [@String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.TotalHours.TotalMinutes.ToString("0.##")).ToArray())];
                var expected = [@String.Join(", ", Model.AttendanceList.Where(m => m.IsSchoolDay).ToList().Select(m => m.TotalHoursExpected.TotalMinutes.ToString("0.##")).ToArray())];

                var year;
                var month;
                var date;
                var i = 0;
                while (i < dates.length) {
                    year = dates[i];
                    i++;
                    month = dates[i] - 1;
                    i++;
                    date = dates[i];
                    i++;
                    data.addRow([new Date(year, month, date), values[i / 3 - 1], expected[i / 3 - 1]]);
                }

                var options = {
                    title: 'Cumulative Attended School Time In This Quarter',
                    height: 600,
                    chartArea: { width: "85%", height: "70%" },
                    legend: 'top',
                    vAxis: { title: "Attended School Time (Minutes)" },
                    hAxis: {
                        title: "Date"
                    }
                };

                var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

                chart.draw(data, options);
            }
        </script>

        <div class="card w-100 p-3">
            <div id="curve_chart"></div>
        </div>
    }
</div>
<br />